#!/usr/bin/env python 

import sys 
import os 
import jinja2
import os.path
import json 
from ArgumentStack import * 

from templater import * 
from templater.sources import * 
from templater.tps import parse_tps_file

config = Configuration(os.environ["HOME"] + "/.tss.config")

stack = ArgumentStack("Wrong command") 
stack.popAll()
stack.pushCommand("help")
stack.assignAction(lambda: print(stack.getHelp()), "Get help")
stack.popAll()


def do_template(template, output, params=None):
    t = None
    available = []
    for source in config.list_sources():
        t = source.get_template(template)
        if t is not None:
            available.append(source)
    if len(available) > 1:
        print("Please select from which source: ")
        for i, source in enumerate(available):
            print("[%d] %s/%s" % (i, source.get_name(), template))
        index = int(input(">> "))
        t = available[index].get_template(template)
    elif len(available) == 1:
        t = available[0].get_template(template)
    else:
        print("Error: template not found")
    if t is not None:
        if params is None:
            params_path = t.get_params_path()
            editor = os.environ["EDITOR"]
            import subprocess
            subprocess.run([editor, params_path])
            params = parse_tps_file(params_path).evaluate()
        t.generate(output, params)
    else:
        print("Error while reading template")



stack.pushCommand("create")
stack.pushVariable("template")
stack.pushVariable("output")
stack.pushCommand("json")
stack.pushVariable("json_file_path")
def create_from_template_using_json(template, output, json_file_path):
    params = {}
    with open(json_file_path) as f:
        params = json.loads(f.read())
    do_template(template, output, params)
stack.assignAction(create_from_template_using_json, "Generate from template where parameters are in specified json file")    

stack.pop()
stack.pop()
stack.pushVariable("params_string")
def create_from_template_using_string(template, output, params_string):
    params = {s.split("=")[0].strip(): s.split("=")[1].strip() for s in params_string.split(" ")}
    do_template(template, output, params)
stack.assignAction(create_from_template_using_string, "Generate from template with parameters specified as string like 'p1=v1 p2=v2'")

stack.pop()
stack.pop()
def create_from_template_using_dialog(template, **kw):
    do_template(template, os.getcwd())
stack.assignAction(create_from_template_using_dialog, "Generate from template in current directory using GUI dialog")
stack.popAll()

stack.pushCommand("verify")
stack.pushCommand("tps")
stack.pushVariable("path")
def verify_tps(path, **kw):
    # TODO implement
    pass
stack.assignAction(verify_tps, "Verify TPS file")
stack.pop()
stack.pop()

stack.pushCommand("json")
stack.pushVariable("tps_path")
stack.pushVariable("json_path")
def verify_json(tps_path, json_path, **kw):
    # TODO implement
    pass
stack.assignAction(verify_json, "Verify if JSON file coontains all parameters specified in TPS")
stack.popAll()

stack.pushCommand("remote")
stack.assignAction(lambda **kw: [print(source.get_name()) for source in config.list_sources()], "Get all sources")
stack.pushCommand("add")
stack.pushVariable("name")
stack.pushVariable("url")
stack.assignAction(lambda name, url, **kw: config.add_source(name, DirectoryTemplateSource(url)), "Add new remote")
stack.pop()
stack.pop()
stack.pop()
stack.pushCommand("remove")
stack.pushVariable("name")
stack.assignAction(lambda name, **kw: config.remove_source(name), "Remove remote")
stack.pop()
stack.pop()
stack.pushCommand("set-url")
stack.pushVariable("name")
stack.pushVariable("url")
stack.assignAction(lambda name, url, **kw: None, "Set new URL to existing remote")

stack.popAll()

stack.pushVariable("template_file")
stack.pushVariable("output_directory")
stack.pushVariable("json_file")
stack.assignAction(lambda template_file, output_directory, json_file: TemplateFile(template_file).generate(output_directory, json.loads(open(json_file).read())), "Make  new file  from given template file and parameters in json file")

stack.popAll()

stack.execute(sys.argv)
